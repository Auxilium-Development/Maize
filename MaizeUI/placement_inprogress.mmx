
NSInteger numberOfSpacesTaken = 0;
NSInteger maxNumberOfRows = 0;
NSInteger maxNumberOfColumns = 0;

for (NSValue *sizeValue in _orderedSizes) {
    CGSize size = [sizeValue CGSizeValue];
    numberOfSpacesTaken += (size.width * size.height);
}
if (isLandscape) {
    maxNumberOfRows = _layoutStyle.rows;
    maxNumberOfColumns = (NSInteger)floor((CGFloat)numberOfSpacesTaken/(CGFloat)maxNumberOfRows);
} else {
    maxNumberOfColumns = _layoutStyle.columns;
    maxNumberOfRows = (NSInteger)floor((CGFloat)numberOfSpacesTaken/(CGFloat)maxNumberOfColumns);
}

NSMutableArray *identifiers = [_orderedIdentifiers mutableCopy];


NSMutableArray *grid = [NSMutableArray new]; 
for (int r = 0; r < maxNumberOfRows; r++) {
    grid[r] = [NSMutableArray new];
    for (int c = 0; c < maxNumberOfColumns; c++) {
        grid[r][c] = [NSNull null];
    }
}

NSMutableArray *unfinishedIdentifiers = [_orderedIdentifiers mutableCopy];

for (NSString *identifier in identifiers) {
    NSInteger index = [self indexForModuleID:identifier];
    if (index < 0) {
        index = 0;
    }

    MZEModuleCoordinate coord;
    MZEModuleCoordinate origCoord;

    coord = MZEModuleCoordinateMake((index / maxNumberOfColumns) + 1, (index % maxNumberOfColumns) + 1);
    origCoord = coord;

    int moduleWidth = [[_orderedSizes objectAtIndex:[_orderedIdentifiers indexOfObject:identifier]] CGSizeValue].width;
                    
    int moduleHeight = [[_orderedSizes objectAtIndex:[_orderedIdentifiers indexOfObject:identifier]] CGSizeValue].height;

    BOOL isPlaced = NO;
                    
    while (!isPlaced) {
        
            if (coord.col + moduleWidth - 1 > maxNumberOfColumns) {
                
                coord.row = coord.row + 1;
                coord.col = 1;
            }
        
            if (coord.row + moduleHeight - 1 > maxNumberOfRows) {
                
                [self.nextPageIcons addObject:icon];
                [unfinishedNodes removeObject: icon];
                isPlaced = YES;
                continue;
            }
        
        BOOL isValid = YES;
        
        for (int row = 0; row < moduleHeight; row++) {
            for (int col = 0; col < moduleWidth; col++) {
                
                if (!isNSNull(grid[coord.row + row - 1][coord.col + col - 1])) {
                    
                    isValid = NO;
                }
            }
        }
        
        // If all of the coordinates that the block would consume are empty we can place it in the 2D grid.
        
        if (isValid) {
            
            for (int row = 0; row < moduleHeight; row++) {
                for (int col = 0; col < moduleWidth; col++) {
                    
                    if (row == 0 && col == 0) {
                        
                        grid[coord.row - 1][coord.col - 1] = identifier;
                    } else {
                        countyThingy++;
                        grid[coord.row + row - 1][coord.col + col - 1] = [NSString stringWithFormat:@"%@|%@", (long)identifier, row+col];
                    }
                }
            }
            
            
            int newIndex = 0;
            NSInteger rowIndex = coord.row > 0 ? coord.row - 1 : maxNumberOfRows   + coord.row;
            NSInteger colIndex = coord.col > 0 ? coord.col - 1 : maxNumberOfColumns + coord.col;

            if (colIndex >= 0 && rowIndex >= 0 && colIndex < maxNumberOfColumns && rowIndex < maxNumberOfRows) {
                newIndex = (rowIndex * totalCols) + colIndex;
                [self setIndex: newIndex forModuleID:identifier];
                [unfinishedIdentifiers removeObject: identifier];
                isPlaced = YES;
            }
            
        }
        else {
            
            if (coord.col + moduleWidth - 1 == maxNumberOfColumns) {
                
                coord.row = coord.row + 1;
                coord.col = 1;
            } else {
                
                coord.col = coord.col + 1;
            }
        }
    }
}

 
SBIconCoordinate coord;
SBIconCoordinate origCoord;







if (self.listView != nil && ![self.listView isKindOfClass:NSClassFromString(@"SBDockIconListView")] && ![self.listView isKindOfClass:NSClassFromString(@"SBFolderIconListView")]) {
        
        // Grab the current |UIInterfaceOrientation| so it can be used later on.
        
        UIInterfaceOrientation currentOrientation = [[UIApplication sharedApplication] statusBarOrientation];
        
        // We need to copy the |NSMutableArray| that contains all of the |SBIcon| instances
        // which can found on the instance Variable [_nodes] on this |SBIconIndexMutableList| instance.
        // If a separate copy wasn't made the future operations below wouldn't be thread safe and
        // it becomes a possibility that SpringBoard could crash quite easily.
        
        NSMutableArray *nodes = [(NSMutableArray *)[_orderedIdentifiers mutableCopy];
        if (!self.nextPageIcons)
        self.nextPageIcons = [NSMutableArray new];
        
        // We need to know the number of rows and columns the |SBIconListView| instance
        // on the [listView] property of this |SBIconIndexMutableList| can hold for the
        // device's current orientation in order to use the information later in this
        // method implementation for calculations.

        NSInteger numberOfSpacesTaken = 0;
        NSInteger maxNumberOfRows = 0;
        NSInteger maxNumberOfColumns = 0;

        for (NSValue *sizeValue in _orderedSizes) {
            CGSize size = [sizeValue CGSizeValue];
            numberOfSpacesTaken += (size.width * size.height);
        }

        if (isLandscape) {
            maxNumberOfRows = _layoutStyle.rows;
            maxNumberOfColumns = (NSInteger)floor((CGFloat)numberOfSpacesTaken/(CGFloat)maxNumberOfRows);

        } else {
            maxNumberOfColumns = _layoutStyle.columns;
            maxNumberOfRows = (NSInteger)floor((CGFloat)numberOfSpacesTaken/(CGFloat)maxNumberOfColumns);
        }
        
        if (maxNumberOfColumns == 0 || maxNumberOfRows == 0)  {
            HBLogError(@"ERROR: MAX COLUMNS OR ROWS IS EQUAL TO ZERO");
            return;
        }
        
        // Now we need to make a 2D array to store the icon Layout that is
        // calculated. The 2D |NSMutableArray| also needs to be filled with |NSNull|(s)
        // so that Objects can be set anywhere in the 2D array. The max rows
        // and columns that were grabbed above will be used to fix the 2D array
        // to the correct size
        
        NSMutableArray *grid = [NSMutableArray new];
        
        for (int r = 0; r < maxNumberOfRows; r++) {
            grid[r] = [NSMutableArray new];
            for (int c = 0; c < maxNumberOfColumns; c++) {
                grid[r][c] = [NSNull null];
            }
        }
        
        NSMutableArray *unfinishedNodes = [_orderedIdentifiers mutableCopy];
        
        // Now the 2D array needs to be populated with the |SBIcon|(s), while accounting
        // for any |SBIcon|(s) that expanded into "Block" form. If a |SBIcon| is expanded
        // into "Block" form the rest of spaces in the grid that it consumes will be filled
        // with a pseudo placeholder icon |IBKPlaceholderIcon| which is a subclass of |SBIcon|
        // in order to keep the icons laid out properly on the |SBIconListView|. First all the
        // |SBIcon|(s) need to be looped over to check if any of them are expanded into "Block" form because
        // if a |SBIcon| is expanded into block form it has a higher priority of placement in the grid
        
        for (NSString *identifier in nodes) {
            
            // Every |SBIcon| or subclasses of it has the method "applicationBundleID"
            // that returns a |NSString| containing the unique identifier for that |SBIcon|.
            // We should always make sure of course that the object the method is being performed
            // on can actually respond to the message first. A class called |IBKResources| has the
            // selector "indexForBundleID:" that will return the saved index of any |SBIcon| that
            // is expanded into "Block" form. The method consumes the |SBIcon|'s unique identifier
            // as a |NSString| and returns a [int] for its corresponding index if one exists. If a
            // corresponding index does not exist it will return 'nil'.
            
            // If the icon is pseudo placeholder of the class |IBKPlaceholderIcon| it should be skipped
            // because all of the pseudo placeholders are getting recalculated in this method implementation.
            // Although early in this method implementation all of the |IBKPlaceholderIcon|(s) were supposedly
            // filter out of the "nodes" |NSMutableArray| it is always better to be safe than sorry.
            
            if (![icon isKindOfClass:NSClassFromString(@"IBKPlaceholderIcon")]) {
                
                // Every time a private method is accessed it should be checked in case the method name, signature
                // or implementation changes in a later version of iOS. Thank you to John Coates for this tip.
                
                if ([icon respondsToSelector:@selector(applicationBundleID)]) {
                    
                    hasWidgets = YES;
                    
                    // If the |SBIcon|'s identifier is saved to a variable it will reduce the number of method calls
                    // for this method implementation.
                    
                    NSString *iconIdentifier = [(SBIcon *)icon applicationBundleID];
                    
                    // If the |SBIcon|'s identifier is null the current iteration of this loop should be skipped because
                    // without a identifier the rest of the processing in this loop is useless.
                    
                    if (!iconIdentifier) continue;
                    
                    int index = [IBKResources indexForBundleID:iconIdentifier forOrientation:currentOrientation];
                    
                    if (index == 973) {
                        if ([[IBKResources widgetBundleIdentifiers] containsObject:iconIdentifier]) {
                            index = 0;
                        }
                        else {
                            continue;
                        }
                    }
                    
                    
                    // The index needs to be converted to |SBIconCoordinate| which is a struct that has
                    // a row and column field. the row field starts at 1 and the column field starts at 1.
                    // An function called "SBIconCoordinateMake" takes in a row and column both of type
                    // |long long| in that order and returns a |SBIconCoordinate|. The |SBIconListView|
                    // instance that is cached has the selector "iconCoordinateForIndex:forOrientation:" that
                    // consumes the index that needs to be converted to a |SBIconCoordinate| and the orientation
                    // that the |SBIconCoordinate| should be in reference to. The variable 'origCoord' is used
                    // later in this method implementation in order to check if the coordinate had to be moved due
                    // to the widget not being able to be placed in its original primary position.
                    
                    SBIconCoordinate coord;
                    SBIconCoordinate origCoord;
                    
                    if ([self.listView respondsToSelector:@selector(iconCoordinateForIndex:forOrientation:)]) {
                            coord = [self.listView iconCoordinateForIndex:index forOrientation:currentOrientation];
                            origCoord = coord;
                    } else {
                        
                        // If |SBIconListView| does not respond to the selector (iconCoordinateForIndex:forOrientation)
                        // it can safely be assumed that the rest of this method implementation will process incorrect
                        // results so the best route would be to return this method's original implementation in order
                        // to avoid unwanted side-effects due to incorrect calculations.
                        
                        self.processing = NO;
                        return %orig;
                    }
                    
                    // Every "Block" can consume a custom number of rows and columns that the user can set
                    // in the Prefereneces for that block. The default number of columns and rows consumed if no
                    // custom number is set in settings is 2 columns and 2 rows. The class |IBKResources| has
                    // two selectors, "horiztonalWidgetSizeForBundleID:" and "verticalWidgetSizeForBundleID:",
                    // they both consume the unique identifier return by the "applicationBundleID" selector
                    // which is found on all instances of |SBIcon| and any subclasses of |SBIcon|. The
                    // selector "horiztonalWidgetSizeForBundleID:" returns the number of columns the |SBIcon| in
                    // "Block" form should consume and the selector "verticalWidgetSizeForBundleID:" returns the
                    // number of rows the |SBIcon| in "Block" form should consume.
                    
                    int moduleWidth = [IBKResources horiztonalWidgetSizeForBundleID:iconIdentifier];
                    
                    int moduleHeight = [IBKResources verticalWidgetSizeForBundleID:iconIdentifier];
                    
                    // The |SBIconCoordinate|, "moduleWidth" and "moduleHeight" need to be used to calculate
                    // where the best fit for the "block" of this |SBIcon|. The "moduleWidth" and "moduleHeight" are
                    // used to check all coordinates the "block" would consume on the 2D grid "grid". If all the
                    // coordinates that the "block" would consume return |NSNull| It can safely be assumed that it is
                    // safe to place the "block" in this current position. If any of the coordinates that the "block" would
                    // return anything other than |NSNull| it has to assumed that there is something currently placed
                    // at that coordinate in the 2D grid so the "block" will be unable to placed in the position.
                    // In the event that the "block" cannot be placed in its original primary coordinate its primary
                    // coordinate will be moved over one and the above conditions will be tested again against the new
                    // primary coordinate. If it is decided that the "block" cannot be fit in any of the available
                    // coordinates on the 2D grid it will placed in |NSMutableArray| that will processed at the end
                    // of this method implementation to move all icons and or blocks to the next available spot on
                    // another |SBIconListView|
                    
                    // A while loop is used to loop over every possible coordinate the "block" can be placed until
                    // a position is found where the "block" can be placed while meeting all of the conditions outlined
                    // above.
                    
                    BOOL isPlaced = NO;
                    
                    while (!isPlaced) {
                        
                        // If the primary coordinate being checked has a row or column that would cause the "block"
                        // to overflow the page vertically or horizontally it should be iterated until the coordinate does not.
                        
//                        while (coord.row + moduleHeight - 1 <= maxNumberOfRows || coord.col + moduleWidth - 1 < maxNumberOfColumns) {
                        
                            if (coord.col + moduleWidth - 1 > maxNumberOfColumns) {
                                
                                coord.row = coord.row + 1;
                                coord.col = 1;
                            }
                        
                            if (coord.row + moduleHeight - 1 > maxNumberOfRows) {
                                
                                [self.nextPageIcons addObject:icon];
                                [unfinishedNodes removeObject: icon];
                                isPlaced = YES;
                                continue;
                            }
//                        }
                        
                        // The "moduleWidth" and "moduleHeight" are used to check every coordinate that the block would consume
                        // to check if they are empty. If they are all empty the "block" can be placed in that position.
                        
                        BOOL isValid = YES;
                        
                        for (int row = 0; row < moduleHeight; row++) {
                            for (int col = 0; col < moduleWidth; col++) {
                                
                                if (!isNSNull(grid[coord.row + row - 1][coord.col + col - 1])) {
                                    
                                    isValid = NO;
                                }
                            }
                        }
                        
                        // If all of the coordinates that the block would consume are empty we can place it in the 2D grid.
                        
                        if (isValid) {
                            
                            for (int row = 0; row < moduleHeight; row++) {
                                for (int col = 0; col < moduleWidth; col++) {
                                    
                                    if (row == 0 && col == 0) {
                                        
                                        grid[coord.row - 1][coord.col - 1] = icon;
                                    } else {
                                        countyThingy++;
                                        IBKPlaceholderIcon *placeHolder = [[NSClassFromString(@"IBKPlaceholderIcon") alloc] initWithIdentifier:[NSString stringWithFormat:@"WIDUXPlaceHolder_%ld/%@", (long)row+col, iconIdentifier]];
                                        grid[coord.row + row - 1][coord.col + col - 1] = placeHolder;
                                    }
                                }
                            }
                            
                            
                            int newIndex = [self.listView indexForCoordinate:coord forOrientation:currentOrientation];
                            [IBKResources setIndex: newIndex forBundleID:iconIdentifier forOrientation:currentOrientation];
                            
                            [unfinishedNodes removeObject: icon];
                            isPlaced = YES;
                            
                        }
                        else {
                            
                            if (coord.col + moduleWidth - 1 == maxNumberOfColumns) {
                                
                                coord.row = coord.row + 1;
                                coord.col = 1;
                            } else {
                                
                                coord.col = coord.col + 1;
                            }
                        }
                    }
                }
            else {
                
                [unfinishedNodes removeObject: icon];
            }
        }
        
        
        NSMutableArray *unfinishedNodesCopy = [unfinishedNodes mutableCopy];
        int count = 0;
        
        for (int row = 0; row < maxNumberOfRows; row++) {
            for (int col = 0; col < maxNumberOfColumns; col++) {
                
                if (isNSNull(grid[row][col])) {
                    if (count < [unfinishedNodes count]) {
                        
                        grid[row][col] = [unfinishedNodes objectAtIndex:count];
                        [unfinishedNodesCopy removeObject:[unfinishedNodes objectAtIndex:count]];
                        count++;
                    } else {
                        if (hasWidgets) {
                            countyThingy++;
                            grid[row][col] = [[NSClassFromString(@"IBKPlaceholderIcon") alloc] initWithIdentifier:[NSString stringWithFormat:@"WIDUXPlaceHolder_%ld", (long)count]];
                            count++;
                        }
                    }
                }
            }
        }
        
        if ([unfinishedNodesCopy count] > 0) {
            for (id icon in unfinishedNodesCopy) {
//                [IBKResources removeIdentifier:[icon applicationBundleID]];
                [self.nextPageIcons addObject:icon];
            }
        }
        
      //  NSLog(@"Left Over Icons: %@", self.nextPageIcons);
        
        NSMutableArray *nextPageIcons = [self.nextPageIcons mutableCopy];
        for (id icon in nextPageIcons) {
//            [IBKResources removeIdentifier:[icon applicationBundleID]];
            [self moveToNextPage:icon];
        }
        
        NSMutableArray *finalGrid = [NSMutableArray new];
        
        for (int row = 0; row < maxNumberOfRows; row++) {
            for (int col = 0; col < maxNumberOfColumns; col++) {
                
                if (!isNSNull(grid[row][col])) {
                    
                    [finalGrid addObject:grid[row][col]];
                }
            }
        }
        
        // [self removeAllNodes];
        [self setValue:[NSMutableArray new] forKey:@"_nodes"];
        
        for (id icon in finalGrid) {
            
            [self addNode: icon];
        }